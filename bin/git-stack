#!/usr/bin/env bash
# Manipulate multiple, dependent branches as a single stack
set -eu -o pipefail
# set -x

command=$1

root_branch="${2-$(git branch --show-current)}"

# Recursively find all branches in the downstream lineage of a given root branch. e.g.
#
#     A --- B ---- C
#            \
#             -----D
#
# Will output
#
#     A,B
#     A,C
#     A,D
#     B,C
#     B,D
function echoDeps() {
    local parent="$1"
    git branch --contains "$parent" --format='%(refname:short)' | while read child ; do
        if [[ "$child" != "$parent" ]] ; then
            echo "$parent,$child"
            echoDeps "$child"
        fi
    done
}

# Find all dependencies of distance 1, and output them in order from root to leaf e.g.
#
#     A->B
#     A->C
#     B->C
#
# Will return
#
#     A->B
#     B->C
#
stack=$(
    python <<HEREDOC
from collections import Counter

paths = {tuple(x.strip().split(',')) for x in '''

$(echoDeps "$root_branch")

'''.strip().split('\n')}

edges = []
while paths:
    counts = Counter(x[1] for x in paths)
    froms = set(x[0] for x in paths)
    tos = set(x[1] for x in paths)
    next_froms = froms - tos
    next_tos = [path for path, count in counts.items() if count == 1]
    edges += [path for path in paths if counts[path[1]] == 1]
    paths = [path for path in paths if path[1] not in next_tos and path[0] not in next_froms]

for edge in edges:
    print(' '.join(edge))
HEREDOC
)

# Using the order from root to leaf, rebase each branch on top of its parent
function stack-rebase() {
    printf '%s\n' "$stack" | while read base rebased ; do
        echo "git rebase $base $rebased"
        echo "git rebase $base $rebased" | sh
        # On my windows machine this didn't work and added a question mark after rebased?
        # git rebase "$base" "$rebased"
    done
}

# git-stack first collects dependency information, so it remembers 
# when relations are lost by git commands changing the root branch hash.
case $command in
    commit)
        echo "git $@"
        git $@
        stack-rebase
        ;;
    amend)
        echo "git commit --fixup HEAD"
        git commit --fixup HEAD
        stack-rebase
        ;;
    push)
        printf '%s\n' "$stack" | while read base rebased ; do
            echo "git push -pfl $rebased"
        done
        ;;
    rebase)
        stack-rebase
        ;;
    *)
        echo "No such command: $command"
        ;;
esac


# Copyright Â© 2021 Jesse Zwaan <j.k.zwaan@gmail.com>
